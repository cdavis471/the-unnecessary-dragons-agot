# Character Interactions
# Claim Throne
claim_throne_dragon_interaction = {
	# Claim Throne
	category = interaction_category_diplomacy
	icon = claim_throne_dragon_interaction
	# Every Year
	cooldown = { months = 12 }
	use_diplomatic_range = no
	desc = claim_throne_dragon_interaction_desc
	interface_priority = 100
	# Shown If
	is_shown = {
		# Person Starting Interaction
		scope:actor = {
			# Dragon Rider With A Respectable Mount
			AND = {
				has_trait = dragon_rider_trait
				OR = {
					has_character_modifier = young_dragonrider_modifier
					has_character_modifier = adult_dragonrider_modifier
					has_character_modifier = mature_dragonrider_modifier
					has_character_modifier = ancient_dragonrider_modifier
					has_character_modifier = dying_dragonrider_modifier
				}
			}
			# Not A Coward or Content
			NOT = { 
				is_imprisoned = yes
				OR = {
					has_trait = craven
					has_trait = content
				}
			}
		} 
		# Person Receiving Interaction
		scope:recipient = {
			# Not in the Watch or Imprisoned By Sender, and King Tier + Above
			NOT = {
				has_government = nights_watch_government
				is_imprisoned = yes
				highest_held_title_tier < tier_kingdom
			}
			# Not The Sender
			NOT = { scope:recipient = scope:actor }
		}
	}
	# Highlighted Interaction
	is_highlighted = {
		always = yes
	}
	# Effect
	on_accept = {
		# Save Title Scope
		scope:recipient = {
			primary_title = {
				save_scope_as = target_title
			}
		}
		# Claim Title Effect
		scope:actor = {
			save_scope_as = claimant
			dragon_claim_throne_effect = {
				TARGET = scope:recipient
				CLAIMANT = scope:actor
			}
		}
	}
	# AI Modifiers
	ai_potential = { has_trait = ambitious }
	ai_targets = { ai_recipients = neighboring_rulers }
	ai_targets = { ai_recipients = liege }
	# 12 Months
	ai_frequency = 12
	# 25% Chance
	ai_intermediary_accept = { base = 25 }
	ai_will_do = { base = 25 }
	# Auto Accept
	auto_accept = yes
}

# Challenge Fellow Dragon Rider
dragon_dance_interaction = {
	# Start Dance
	category = interaction_category_hostile
	icon = dragon_dance_interaction
	# Every Month
	cooldown = { months = 1 }
	popup_on_receive = yes
	pause_on_receive = yes
	interface_priority = 100
	use_diplomatic_range = no
	desc = dragon_dance_interaction_desc
	# Valyrian Dragon Rider
	is_shown = {
		# Offering
		scope:actor = {
			# Dragon Rider with at least 5+ YO Mount
			AND = {
				has_trait = dragon_rider_trait
				OR = {
					has_character_modifier = adolescent_dragonrider_modifier
					has_character_modifier = young_dragonrider_modifier
					has_character_modifier = adult_dragonrider_modifier
					has_character_modifier = mature_dragonrider_modifier
					has_character_modifier = ancient_dragonrider_modifier
					has_character_modifier = dying_dragonrider_modifier
				}
			}
			# Available
			NOT = {
				has_government = nights_watch_government
				is_imprisoned = yes
			}
		} 
		# Accepting
		scope:recipient = {
			# Dragon Rider with at least 5+ YO Mount
			AND = {
				has_trait = dragon_rider_trait
				OR = {
					has_character_modifier = adolescent_dragonrider_modifier
					has_character_modifier = young_dragonrider_modifier
					has_character_modifier = adult_dragonrider_modifier
					has_character_modifier = mature_dragonrider_modifier
					has_character_modifier = ancient_dragonrider_modifier
					has_character_modifier = dying_dragonrider_modifier
				}
			}
			# Available
			NOT = {
				has_government = nights_watch_government
				is_imprisoned = yes
			}
			# Not Personal
			NOT = { 
				scope:recipient = scope:actor 
			}
		}
	}
	# Highlighted Interaction
	is_highlighted = {
		always = yes
	}
	# Valid if at war or rival
	is_valid = {
		scope:actor = {
			OR = {
				is_at_war_with = scope:recipient
				AND = {
					has_relation_rival = scope:recipient
					opinion = {
						target = scope:recipient
						value <= -50
					}
				}
			}
		} 
	}
	# Run Dance
	on_accept = {
		scope:actor = {
			dragon_dance_effect = {
				RECIPIENT = scope:recipient
				ACTOR = scope:actor
			}
		}
	}
	# AI Modifiers
	# Not a coward
	ai_potential = { NOT = { has_trait = craven } }
	# 25% Chance Every 3 Months
	ai_will_do = { base = 25 }
	ai_frequency = 3
	ai_intermediary_accept = { base = 25 }
	# Targets Rivals / War Enemies who are family, dynasty, liege, war enemies or primary war enemies
	ai_targets = { ai_recipients = family }
	ai_targets = { ai_recipients = liege }
	ai_targets = { ai_recipients = war_enemies }
	ai_targets = { ai_recipients = primary_war_enemies }
	ai_targets = {
        ai_recipients = dynasty
        max = 20
    }
	# Auto Accept
	auto_accept = yes
}
# Offer Mount
dragon_offer_interaction = {
	# Will Mount Be Claimed?
	category = interaction_category_diplomacy
	icon = dragon_offer_interaction
	# Every Six Months
	cooldown = { months = 6 }
	popup_on_receive = yes
	pause_on_receive = yes
	interface_priority = 100
	use_diplomatic_range = no
	desc = dragon_offer_interaction_desc
	# Valyrian Dragon Rider
	is_shown = {
		# Offering
		scope:actor = {
			NOT = { is_imprisoned = yes }
			# Has Riderless Dragon
			any_character_artifact = {
				AND = {
					has_variable = dragon_id
					NOT = { has_variable = has_dragon_rider }
				}
			}
		} 
		# Accepting
		scope:recipient = {
			is_ai = yes
			# Valyrian Ancestry
			OR = {
				# Custom Character Check
				AND = {
					has_culture = culture:high_valyrian
					NOT = { exists = real_father }
					NOT = { exists = father }
					NOT = { exists = mother }
				}
				# Valyrian Mother
				AND = {
					exists = mother
					mother = {
						has_culture = culture:high_valyrian
					}
				}
				# Valyrian Father (Real Father Check Included)
				OR = {
					AND = {
						NOT = { exists = real_father }
						exists = father
						father = {
							has_culture = culture:high_valyrian
						}
					}
					AND = {
						exists = real_father
						real_father = {
							has_culture = culture:high_valyrian
						}
					}
				}
				# Valyrian Mother Parents Check
				AND = {
					exists = mother
					mother = {
						OR = {
							AND = {
								exists = mother
								mother = {
									has_culture = culture:high_valyrian
								}
							}
							AND = {
								NOT = { exists = real_father }
								exists = father
								father = {
									has_culture = culture:high_valyrian
								}
							}
							AND = {
								exists = real_father
								real_father = {
									has_culture = culture:high_valyrian
								}
							}
						}
					}
				}
				# Valyrian Father Parents Check
				AND = {
					exists = father
					father = {
						OR = {
							AND = {
								exists = mother
								mother = {
									has_culture = culture:high_valyrian
								}
							}
							AND = {
								NOT = { exists = real_father }
								exists = father
								father = {
									has_culture = culture:high_valyrian
								}
							}
							AND = {
								exists = real_father
								real_father = {
									has_culture = culture:high_valyrian
								}
							}
						}
					}
				}
			}
			# Available
			NOT = {
				has_government = nights_watch_government
				is_imprisoned = yes
				has_trait = dragon_rider_trait
			}
			# Not Personal
			NOT = { 
				scope:recipient = scope:actor 
			}
		}
	}
	# Highlighted Interaction
	is_highlighted = {
		always = yes
	}
	# Valid If Same Line
	is_valid = {
		scope:recipient = { age >= 12 }
		OR = {	
			scope:recipient.dynasty = scope:actor.dynasty
			AND = {
				exists = scope:recipient.mother.dynasty
				scope:recipient.mother.dynasty = scope:actor.dynasty
			}
			AND = {
				exists = scope:recipient.real_father.dynasty
				scope:recipient.real_father.dynasty = scope:actor.dynasty
			}
			AND = {
				NOT = { exists = scope:recipient.real_father.dynasty }
				scope:recipient.father.dynasty = scope:actor.dynasty
			}
		}
	}
	# Offer Mount
	on_accept = {
		random_list = {
			90 = {
				# Owner of Dragon
				scope:actor = {
					# Find Dragon
					random_character_artifact = {
						limit = {
							AND = {
								has_variable = dragon_id
								NOT = { has_variable = has_dragon_rider }
							}
						}
						# Save Scope
						save_scope_as = dragon_transfer_offer
						# Set Variable
						set_variable = has_dragon_rider
						# Set New Owner
						set_owner = scope:recipient 
					}
					# Find Story
					random_owned_story = {
						limit = { 
							AND = {
								has_variable = story_cycle_dragon_id
								var:story_cycle_dragon_id = scope:dragon_transfer_offer.var:dragon_id
							}
						}
						# Transfer Story
						make_story_owner = scope:recipient
					}
					# Claimant Successful
					trigger_event = tud_interaction_events.0006
				}
			}
			10 = {
				# Claimant is killed
				scope:recipient = {
					death = { death_reason = death_tud_eaten }
				}
				# Claimant is killed
				scope:actor = {
					# Trigger Event
					trigger_event = tud_interaction_events.0007
				}
			}
		}
	}
	# AI Modifiers
	# Will offer when possible
	ai_potential = { always = yes }
	# 25% Chance every two months
	ai_will_do = { base = 25 }
	ai_intermediary_accept = { base = 25 }
	ai_frequency = 2
	# Will give to family or dynasty
	ai_targets = { ai_recipients = family }
	ai_targets = { ai_recipients = dynasty }
	# Auto Accept
	auto_accept = yes
}

egg_cradling_interaction = {
	# Will Egg Be Hatched?
	category = interaction_category_diplomacy
	icon = egg_cradling_interaction
	# Every 3 Months
	cooldown = { months = 3 }
	popup_on_receive = yes
	pause_on_receive = yes
	interface_priority = 100
	use_diplomatic_range = no
	desc = egg_cradling_interaction_desc
	# Valyrian Dragon Rider
	is_shown = {
		# Offering
		scope:actor = {
			NOT = { is_imprisoned = yes }
			# Valyrian Ancestry
			OR = {
				# Custom Character Check
				AND = {
					has_culture = culture:high_valyrian
					NOT = { exists = real_father }
					NOT = { exists = father }
					NOT = { exists = mother }
				}
				# Valyrian Mother
				AND = {
					exists = mother
					mother = {
						has_culture = culture:high_valyrian
					}
				}
				# Valyrian Father (Real Father Check Included)
				OR = {
					AND = {
						NOT = { exists = real_father }
						exists = father
						father = {
							has_culture = culture:high_valyrian
						}
					}
					AND = {
						exists = real_father
						real_father = {
							has_culture = culture:high_valyrian
						}
					}
				}
				# Valyrian Mother Parents Check
				AND = {
					exists = mother
					mother = {
						OR = {
							AND = {
								exists = mother
								mother = {
									has_culture = culture:high_valyrian
								}
							}
							AND = {
								NOT = { exists = real_father }
								exists = father
								father = {
									has_culture = culture:high_valyrian
								}
							}
							AND = {
								exists = real_father
								real_father = {
									has_culture = culture:high_valyrian
								}
							}
						}
					}
				}
				# Valyrian Father Parents Check
				AND = {
					exists = father
					father = {
						OR = {
							AND = {
								exists = mother
								mother = {
									has_culture = culture:high_valyrian
								}
							}
							AND = {
								NOT = { exists = real_father }
								exists = father
								father = {
									has_culture = culture:high_valyrian
								}
							}
							AND = {
								exists = real_father
								real_father = {
									has_culture = culture:high_valyrian
								}
							}
						}
					}
				}
			}
			# Has Dragon Egg
			any_character_artifact = {
				has_variable = dragon_egg
			}
		} 
		# Accepting
		scope:recipient = {
			NOT = { is_imprisoned = yes }
			# Valyrian Ancestry
			OR = {
				# Custom Character Check
				AND = {
					has_culture = culture:high_valyrian
					NOT = { exists = real_father }
					NOT = { exists = father }
					NOT = { exists = mother }
				}
				# Valyrian Mother
				AND = {
					exists = mother
					mother = {
						has_culture = culture:high_valyrian
					}
				}
				# Valyrian Father (Real Father Check Included)
				OR = {
					AND = {
						NOT = { exists = real_father }
						exists = father
						father = {
							has_culture = culture:high_valyrian
						}
					}
					AND = {
						exists = real_father
						real_father = {
							has_culture = culture:high_valyrian
						}
					}
				}
				# Valyrian Mother Parents Check
				AND = {
					exists = mother
					mother = {
						OR = {
							AND = {
								exists = mother
								mother = {
									has_culture = culture:high_valyrian
								}
							}
							AND = {
								NOT = { exists = real_father }
								exists = father
								father = {
									has_culture = culture:high_valyrian
								}
							}
							AND = {
								exists = real_father
								real_father = {
									has_culture = culture:high_valyrian
								}
							}
						}
					}
				}
				# Valyrian Father Parents Check
				AND = {
					exists = father
					father = {
						OR = {
							AND = {
								exists = mother
								mother = {
									has_culture = culture:high_valyrian
								}
							}
							AND = {
								NOT = { exists = real_father }
								exists = father
								father = {
									has_culture = culture:high_valyrian
								}
							}
							AND = {
								exists = real_father
								real_father = {
									has_culture = culture:high_valyrian
								}
							}
						}
					}
				}
			}
			# Available
			NOT = {
				has_government = nights_watch_government
				has_trait = dragon_rider_trait
			}
			# Not Personal
			NOT = { 
				scope:recipient = scope:actor 
			}
		}
	}
	# Highlighted Interaction
	is_highlighted = {
		always = yes
	}
	# Valid If Same Dynasty & Young Child
	is_valid = {
		scope:recipient = { age < 4 }
		OR = {	
			scope:recipient.dynasty = scope:actor.dynasty
			AND = {
				exists = scope:recipient.mother.dynasty
				scope:recipient.mother.dynasty = scope:actor.dynasty
			}
			AND = {
				exists = scope:recipient.real_father.dynasty
				scope:recipient.real_father.dynasty = scope:actor.dynasty
			}
			AND = {
				NOT = { exists = scope:recipient.real_father.dynasty }
				scope:recipient.father.dynasty = scope:actor.dynasty
			}
		}
	}
	# Offer Egg
	on_accept = {
		# New Rider
		scope:recipient = {
			create_story = story_cycle_dragon_rider
		}
		# Owner of Egg
		scope:actor = {
			# Save Egg Scope
			random_character_artifact = {
				limit = {
					has_variable = dragon_egg
				}
				save_scope_as = egg_transfer_offer
			}
			# Destroy Egg
            destroy_artifact = scope:egg_transfer_offer
			trigger_event = tud_interaction_events.0008
		}
	}
	# AI Modifiers
	ai_potential = { always = yes }
	ai_will_do = { base = 50 }
	ai_targets = { ai_recipients = family }
	ai_frequency = 2
	ai_intermediary_accept = { base = 50 }
	# Auto Accept
	auto_accept = yes
}

# Claim Mount Interaction
claim_mount_interaction = {
	# Will Mount Be Claimed?
	category = interaction_category_diplomacy
	icon = dragon_offer_interaction
	# Every Six Months
	cooldown = { months = 6 }
	popup_on_receive = yes
	pause_on_receive = yes
	interface_priority = 100
	use_diplomatic_range = yes
	desc = claim_mount_interaction_desc
	# Is it possible?
	is_shown = {
		# Claiming
		scope:actor = {
			NOT = { is_imprisoned = yes }
			# Player Only Interaction
			is_ai = no
			# Valyrian Ancestry
			OR = {
				# Custom Character Check
				AND = {
					has_culture = culture:high_valyrian
					NOT = { exists = real_father }
					NOT = { exists = father }
					NOT = { exists = mother }
				}
				# Valyrian Mother
				AND = {
					exists = mother
					mother = {
						has_culture = culture:high_valyrian
					}
				}
				# Valyrian Father (Real Father Check Included)
				OR = {
					AND = {
						NOT = { exists = real_father }
						exists = father
						father = {
							has_culture = culture:high_valyrian
						}
					}
					AND = {
						exists = real_father
						real_father = {
							has_culture = culture:high_valyrian
						}
					}
				}
				# Valyrian Mother Parents Check
				AND = {
					exists = mother
					mother = {
						OR = {
							AND = {
								exists = mother
								mother = {
									has_culture = culture:high_valyrian
								}
							}
							AND = {
								NOT = { exists = real_father }
								exists = father
								father = {
									has_culture = culture:high_valyrian
								}
							}
							AND = {
								exists = real_father
								real_father = {
									has_culture = culture:high_valyrian
								}
							}
						}
					}
				}
				# Valyrian Father Parents Check
				AND = {
					exists = father
					father = {
						OR = {
							AND = {
								exists = mother
								mother = {
									has_culture = culture:high_valyrian
								}
							}
							AND = {
								NOT = { exists = real_father }
								exists = father
								father = {
									has_culture = culture:high_valyrian
								}
							}
							AND = {
								exists = real_father
								real_father = {
									has_culture = culture:high_valyrian
								}
							}
						}
					}
				}
			}
			# Not Already A Dragon Rider
			NOT = { has_trait = dragon_rider_trait }
		} 
		# Accepting
		scope:recipient = {
			is_ai = yes
			# Has Riderless Dragon
			any_character_artifact = {
				AND = {
					has_variable = dragon_id
					NOT = { has_variable = has_dragon_rider }
				}
			}
			NOT = { is_imprisoned = yes }
			# Available
			NOT = {
				has_government = nights_watch_government
			}
			# Not Personal
			NOT = { 
				scope:recipient = scope:actor 
			}
		}
	}
	# Highlighted Interaction
	is_highlighted = {
		always = yes
	}
	# Valid If Same Dynasty
	is_valid = {
		scope:actor = { age >= 12 }
		scope:recipient = {
			opinion = {
				target = scope:actor
				value >= 50
			}
		}
	}
	# Claim Mount
	on_accept = {
		random_list = {
			90 = {
				# Owner of Dragon
				scope:recipient = {
					# Save Dragon Scope
					random_character_artifact = {
						limit = {
							AND = {
								has_variable = dragon_id
								NOT = { has_variable = has_dragon_rider }
							}
						}
						save_scope_as = dragon_transfer_offer
					}
					# Save Story Scope
					random_owned_story = {
						limit = { 
							AND = {
								has_variable = story_cycle_dragon_id
								var:story_cycle_dragon_id = scope:dragon_transfer_offer.var:dragon_id
							}
						}
						save_scope_as = story_transfer_offer
					}
					# Transfer Story
					scope:story_transfer_offer = { make_story_owner = scope:actor }
					# Transfer Artifact
					scope:dragon_transfer_offer = { 
						set_variable = has_dragon_rider
						set_owner = scope:actor 
					}
					# Trigger Event
					trigger_event = tud_interaction_events.0006
				}
			}
			10 = {
				scope:actor = {
					death = { death_reason = death_tud_eaten }
				}
				scope:recipient = {
					# Trigger Event
					trigger_event = tud_interaction_events.0007
				}
			}
		}
	}
	# AI Modifiers
	ai_will_do = { base = 0 }
	# Auto Accept
	auto_accept = yes
}

# Feed Prisoner To Dragon
feed_dragon_prisoner_interaction = {
	# Claim Throne
	category = interaction_category_hostile
	icon = prison
	# Every 10 Days
	cooldown = { days = 10 }
	use_diplomatic_range = no
	desc = feed_dragon_prisoner_interaction_desc
	interface_priority = 100
	# Shown If
	is_shown = {
		# Person Starting Interaction
		scope:actor = {
			# Dragon Rider who would not be bothered by such an act
			AND = {
				has_trait = dragon_rider_trait
				OR = {
					has_trait = sadistic
					has_trait = callous
					has_trait = authoritative
					has_trait = ruthless
					has_trait = paranoid
					has_trait = arbitrary
					has_trait = arrogant
					has_trait = vengeful
					has_trait = wrathful
				}
			}
		} 
		# Person Receiving Interaction
		scope:recipient = {
			is_imprisoned_by = scope:actor
			# Not the player
			NOT = { scope:recipient = scope:actor }
		}
	}
	# Highlighted Interaction
	is_highlighted = {
		always = yes
	}
	# Effect
	on_accept = {
		# Save Title Scope
		scope:recipient = {
			every_close_family_member = {
				add_opinion = {
					target = scope:actor
					modifier = executed_close_relation_opinion
				}
			}
			death = {
				death_reason = death_tud_eaten
				killer = scope:actor
			}
		}
	}
	# AI Modifiers
	ai_potential = { has_trait = callous }
	ai_targets = { ai_recipients = vassals }
	ai_frequency = 2
	ai_intermediary_accept = { base = 10 }
	ai_will_do = { base = 10 }
	# Auto Accept
	auto_accept = yes
}

