story_cycle_dragon_rider = {

    # Dragon Hatched
    on_setup = {
        # Save Scope
        save_scope_as = story
        # GLOBAL DRAGON ID
        # Update Global Dragon ID
        if = {
            limit = { exists = global_var:dragon_id_counter }
            change_global_variable = {
                name = dragon_id_counter
                add = 1
            }
        }
        # Create First Dragon ID
        else = {
            set_global_variable = {
                name = dragon_id_counter
                value = 1
            }
        }
        # Set current global ID as story dragon ID
        set_variable = {
            name = story_cycle_dragon_id
            value = global_var:dragon_id_counter
        }
        # For Dragon Hatcher
		story_owner = {
            # Create Artifact
            create_dragon_effect = {
                OWNER = this
            }
            add_trait = dragon_rider_trait
            add_character_modifier = hatchling_dragonrider_modifier
            # Memory
            create_character_memory = {
                type = tud_hatching_memory
                participants = {
                    hatcher = scope:story.story_owner
                }
            }
		}
    }

    # Dragon Dies
    on_end = {
        # Find relevant dragon
        random_artifact = {
            limit = { 
                AND = {
                    has_variable = dragon_id
                    var:dragon_id = scope:story.var:story_cycle_dragon_id 
                }
            }
            save_scope_as = dragon_to_die
        }
        story_owner = {
            remove_trait = dragon_rider_trait
            if = {
                # The Bloodline Has Ended
                limit = { scope:dragon_to_die = { has_variable = death_bloodline } }
                # Destroy Dragon
                destroy_artifact = scope:dragon_to_die
                # Memory
                create_character_memory = {
                    type = tud_dying_memory
                    participants = {
                        rider = this
                    }
                }
            }
            else_if = {
                # Mortality
                limit = { scope:dragon_to_die = { has_variable = death_age } }
                # Create Dragon Skull
                create_dragonskull_effect = {
                    OWNER = this
                }
                # Destroy Dragon
                destroy_artifact = scope:dragon_to_die
                # Memory
                create_character_memory = {
                    type = tud_dying_memory
                    participants = {
                        rider = this
                    }
                }
            }
            else_if = {
                # A Dance of Dragons
                limit = { scope:dragon_to_die = { has_variable = death_dance } }
                # Create Dragon Skull
                create_dragonskull_effect = {
                    OWNER = this
                }
                # Destroy Dragon
                destroy_artifact = scope:dragon_to_die
                # Memory
                create_character_memory = {
                    type = tud_dying_memory
                    participants = {
                        rider = this
                    }
                }
            }
            else_if = {
                # Death In Battle
                limit = { scope:dragon_to_die = { has_variable = death_battle } }
                # Create Dragon Skull
                create_dragonskull_effect = {
                    OWNER = this
                }
                # Destroy Dragon
                destroy_artifact = scope:dragon_to_die
                # Memory
                create_character_memory = {
                    type = tud_dying_memory
                    participants = {
                        rider = this
                    }
                }
            }
            else = {
                # Destroy Dragon
                destroy_artifact = scope:dragon_to_die
                # Memory
                create_character_memory = {
                    type = tud_dying_memory
                    participants = {
                        rider = this
                    }
                }
            }
        }
    }

    # Rider Dies
    on_owner_death = {
        # Save Scopes
        random_artifact = {
            limit = { 
                has_variable = dragon_id
                var:dragon_id = scope:story.var:story_cycle_dragon_id
            }
            save_scope_as = dragon_transfer_owner_death
            if = {
                limit = { has_variable = has_dragon_rider }
                remove_variable = has_dragon_rider
            }
        }
        # Family Member of the Blood
        story_owner = {
            house = {
                random_house_member = {
                    limit = {
                        NOT = { this = scope:story.story_owner }
                        # Valyrian Ancestry
                        OR = {
                            # Custom Character Check
                            AND = {
                                has_culture = culture:high_valyrian
                                NOT = { exists = real_father }
                                NOT = { exists = father }
                                NOT = { exists = mother }
                            }
                            # Valyrian Mother
                            AND = {
                                exists = mother
                                mother = {
                                    has_culture = culture:high_valyrian
                                }
                            }
                            # Valyrian Father (Real Father Check Included)
                            OR = {
                                AND = {
                                    NOT = { exists = real_father }
                                    exists = father
                                    father = {
                                        has_culture = culture:high_valyrian
                                    }
                                }
                                AND = {
                                    exists = real_father
                                    real_father = {
                                        has_culture = culture:high_valyrian
                                    }
                                }
                            }
                            # Valyrian Mother Parents Check
                            AND = {
                                exists = mother
                                mother = {
                                    OR = {
                                        AND = {
                                            exists = mother
                                            mother = {
                                                has_culture = culture:high_valyrian
                                            }
                                        }
                                        AND = {
                                            NOT = { exists = real_father }
                                            exists = father
                                            father = {
                                                has_culture = culture:high_valyrian
                                            }
                                        }
                                        AND = {
                                            exists = real_father
                                            real_father = {
                                                has_culture = culture:high_valyrian
                                            }
                                        }
                                    }
                                }
                            }
                            # Valyrian Father Parents Check
                            AND = {
                                exists = father
                                father = {
                                    OR = {
                                        AND = {
                                            exists = mother
                                            mother = {
                                                has_culture = culture:high_valyrian
                                            }
                                        }
                                        AND = {
                                            NOT = { exists = real_father }
                                            exists = father
                                            father = {
                                                has_culture = culture:high_valyrian
                                            }
                                        }
                                        AND = {
                                            exists = real_father
                                            real_father = {
                                                has_culture = culture:high_valyrian
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    save_scope_as = dragon_inheritance_one
                }
            }
            dynasty = {
                random_dynasty_member = {
                    limit = {
                        NOT = { this = scope:story.story_owner }
                        # Valyrian Ancestry
                        OR = {
                            # Custom Character Check
                            AND = {
                                has_culture = culture:high_valyrian
                                NOT = { exists = real_father }
                                NOT = { exists = father }
                                NOT = { exists = mother }
                            }
                            # Valyrian Mother
                            AND = {
                                exists = mother
                                mother = {
                                    has_culture = culture:high_valyrian
                                }
                            }
                            # Valyrian Father (Real Father Check Included)
                            OR = {
                                AND = {
                                    NOT = { exists = real_father }
                                    exists = father
                                    father = {
                                        has_culture = culture:high_valyrian
                                    }
                                }
                                AND = {
                                    exists = real_father
                                    real_father = {
                                        has_culture = culture:high_valyrian
                                    }
                                }
                            }
                            # Valyrian Mother Parents Check
                            AND = {
                                exists = mother
                                mother = {
                                    OR = {
                                        AND = {
                                            exists = mother
                                            mother = {
                                                has_culture = culture:high_valyrian
                                            }
                                        }
                                        AND = {
                                            NOT = { exists = real_father }
                                            exists = father
                                            father = {
                                                has_culture = culture:high_valyrian
                                            }
                                        }
                                        AND = {
                                            exists = real_father
                                            real_father = {
                                                has_culture = culture:high_valyrian
                                            }
                                        }
                                    }
                                }
                            }
                            # Valyrian Father Parents Check
                            AND = {
                                exists = father
                                father = {
                                    OR = {
                                        AND = {
                                            exists = mother
                                            mother = {
                                                has_culture = culture:high_valyrian
                                            }
                                        }
                                        AND = {
                                            NOT = { exists = real_father }
                                            exists = father
                                            father = {
                                                has_culture = culture:high_valyrian
                                            }
                                        }
                                        AND = {
                                            exists = real_father
                                            real_father = {
                                                has_culture = culture:high_valyrian
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    save_scope_as = dragon_inheritance_two
                }
            }
        }
        # House Head Inheritance If Neutral / Positive Relationship
        if = {
            limit = { 
                AND = {
                    exists = scope:story.story_owner.house.house_head
                    NOT = { scope:story.story_owner = scope:story.story_owner.house.house_head }
                    scope:story.story_owner.house.house_head = {
                        opinion = {
                            target = scope:story.story_owner
                            value >= 0
                        }
                    }
                }
            }
            # Set House Head
            make_story_owner = scope:story.story_owner.house.house_head
            scope:dragon_transfer_owner_death = {
                set_owner = scope:story.story_owner.house.house_head
            }
        }
        # House Inheritance
        else_if = {
            limit = { 
                exists = scope:dragon_inheritance_one 

            }
            # Set House Member
            make_story_owner = scope:dragon_inheritance_one
            scope:dragon_transfer_owner_death = {
                set_owner = scope:dragon_inheritance_one
            }
        }
        # Dynasty Inheritance
        else_if = {
            limit = { exists = scope:dragon_inheritance_two }
            # Set Dynasty Member
            make_story_owner = scope:dragon_inheritance_two
            scope:dragon_transfer_owner_death = {
                set_owner = scope:dragon_inheritance_two
            }
        }
        # The Bloodline Is Dead
        else = {
            scope:dragon_transfer_owner_death = {
                set_variable = death_bloodline
            }
            end_story = yes
        }
    }

    # Dragon Army Maintenance
    effect_group = {
        # Regularly Check
        days = 3
        chance = 100
        # Effects
        first_valid = {
            # In Army on Dragonback - Prevent Single Combat Events
            triggered_effect = {
                trigger = {
                    story_owner = {
                        is_in_army = yes
                        any_character_artifact = {
                            AND = {
                                has_variable = dragon_id
                                var:dragon_id = scope:story.var:story_cycle_dragon_id
                                has_variable = has_dragon_rider
                            }
                        }
                    }
                }
                effect = {
                    story_owner = {
                        set_variable = engaged_in_single_combat
                    }
                }
            }
            # Not In Army
            triggered_effect = {
                trigger = {
                    story_owner = {
                        is_in_army = no
                        exists = var:engaged_in_single_combat
                    }
                }
                effect = {
                    story_owner = {
                        remove_variable = engaged_in_single_combat
                    }
                }
            }
        }
    }

    # Dragon Rider Trait Maintenance
    effect_group = {
        days = 7
        chance = 100
        first_valid = {
            # Does Not Have Trait
            triggered_effect = {
                trigger = {
                    story_owner = {
                        any_character_artifact = {
                            AND = {
                                has_variable = dragon_id
                                var:dragon_id = scope:story.var:story_cycle_dragon_id
                                has_variable = has_dragon_rider
                            }
                        }
                        NOT = { has_trait = dragon_rider_trait }
                    }
                }
                effect = {
                    story_owner = {
                        add_trait = dragon_rider_trait
                    }
                }
            }
        }
    }

    # Dragon Rider Modifier Maintenance
    effect_group = {
        days = 7
        chance = 100
        first_valid = {
            # Hatchling
            triggered_effect = {
                trigger = { 
                    story_owner = { 
                        any_character_artifact = {
                            AND = {
                                has_variable = dragon_id
                                var:dragon_id = scope:story.var:story_cycle_dragon_id
                                has_variable = has_dragon_rider
                                has_artifact_modifier = hatchling_dragon_modifier
                            }
                        }
                        NOT = { has_character_modifier = hatchling_dragonrider_modifier } 
                    }
                }
                effect = {
                    story_owner = { 
                        add_character_modifier = hatchling_dragonrider_modifier
                        remove_character_modifier = adolescent_dragonrider_modifier
                        remove_character_modifier = young_dragonrider_modifier
                        remove_character_modifier = adult_dragonrider_modifier
                        remove_character_modifier = mature_dragonrider_modifier
                        remove_character_modifier = ancient_dragonrider_modifier
                        remove_character_modifier = dying_dragonrider_modifier
                    }
                }
            }
            # Adolescent
            triggered_effect = {
                trigger = { 
                    story_owner = { 
                        any_character_artifact = {
                            AND = {
                                has_variable = dragon_id
                                var:dragon_id = scope:story.var:story_cycle_dragon_id
                                has_variable = has_dragon_rider
                                has_artifact_modifier = adolescent_dragon_modifier
                            }
                        }
                        NOT = { has_character_modifier = adolescent_dragonrider_modifier } 
                    }
                }
                effect = {
                    story_owner = { 
                        add_character_modifier = adolescent_dragonrider_modifier
                        remove_character_modifier = hatchling_dragonrider_modifier
                        remove_character_modifier = young_dragonrider_modifier
                        remove_character_modifier = adult_dragonrider_modifier
                        remove_character_modifier = mature_dragonrider_modifier
                        remove_character_modifier = ancient_dragonrider_modifier
                        remove_character_modifier = dying_dragonrider_modifier
                    }
                }
            }
            # Young
            triggered_effect = {
                trigger = { 
                    story_owner = { 
                        any_character_artifact = {
                            AND = {
                                has_variable = dragon_id
                                var:dragon_id = scope:story.var:story_cycle_dragon_id
                                has_variable = has_dragon_rider
                                has_artifact_modifier = young_dragon_modifier
                            }
                        }
                        NOT = { has_character_modifier = young_dragonrider_modifier } 
                    }
                }
                effect = {
                    story_owner = { 
                        add_character_modifier = young_dragonrider_modifier
                        remove_character_modifier = hatchling_dragonrider_modifier
                        remove_character_modifier = adolescent_dragonrider_modifier
                        remove_character_modifier = adult_dragonrider_modifier
                        remove_character_modifier = mature_dragonrider_modifier
                        remove_character_modifier = ancient_dragonrider_modifier
                        remove_character_modifier = dying_dragonrider_modifier
                    }
                }
            }
            # Adult
            triggered_effect = {
                trigger = { 
                    story_owner = { 
                        any_character_artifact = {
                            AND = {
                                has_variable = dragon_id
                                var:dragon_id = scope:story.var:story_cycle_dragon_id
                                has_variable = has_dragon_rider
                                has_artifact_modifier = adult_dragon_modifier
                            }
                        }
                        NOT = { has_character_modifier = adult_dragonrider_modifier } 
                    }
                }
                effect = {
                    story_owner = { 
                        add_character_modifier = adult_dragonrider_modifier
                        remove_character_modifier = adolescent_dragonrider_modifier
                        remove_character_modifier = young_dragonrider_modifier
                        remove_character_modifier = hatchling_dragonrider_modifier
                        remove_character_modifier = mature_dragonrider_modifier
                        remove_character_modifier = ancient_dragonrider_modifier
                        remove_character_modifier = dying_dragonrider_modifier
                    }
                }
            }
            # Mature
            triggered_effect = {
                trigger = { 
                    story_owner = { 
                        any_character_artifact = {
                            AND = {
                                has_variable = dragon_id
                                var:dragon_id = scope:story.var:story_cycle_dragon_id
                                has_variable = has_dragon_rider
                                has_artifact_modifier = mature_dragon_modifier
                            }      
                        }
                        NOT = { has_character_modifier = mature_dragonrider_modifier } 
                    }
                }
                effect = {
                    story_owner = { 
                        add_character_modifier = mature_dragonrider_modifier
                        remove_character_modifier = adolescent_dragonrider_modifier
                        remove_character_modifier = young_dragonrider_modifier
                        remove_character_modifier = adult_dragonrider_modifier
                        remove_character_modifier = hatchling_dragonrider_modifier
                        remove_character_modifier = ancient_dragonrider_modifier
                        remove_character_modifier = dying_dragonrider_modifier
                    }
                }
            }
            # Ancient
            triggered_effect = {
                trigger = { 
                    story_owner = { 
                        any_character_artifact = {
                            AND = {
                                has_variable = dragon_id
                                var:dragon_id = scope:story.var:story_cycle_dragon_id
                                has_variable = has_dragon_rider
                                has_artifact_modifier = ancient_dragon_modifier
                            }
                        }
                        NOT = { has_character_modifier = ancient_dragonrider_modifier } 
                    }
                }
                effect = {
                    story_owner = { 
                        add_character_modifier = ancient_dragonrider_modifier
                        remove_character_modifier = adolescent_dragonrider_modifier
                        remove_character_modifier = young_dragonrider_modifier
                        remove_character_modifier = adult_dragonrider_modifier
                        remove_character_modifier = mature_dragonrider_modifier
                        remove_character_modifier = hatchling_dragonrider_modifier
                        remove_character_modifier = dying_dragonrider_modifier
                    }
                }
            }
            # Dying
            triggered_effect = {
                trigger = { 
                    story_owner = { 
                        any_character_artifact = {
                            AND = {
                                has_variable = dragon_id
                                var:dragon_id = scope:story.var:story_cycle_dragon_id
                                has_variable = has_dragon_rider
                                has_artifact_modifier = dying_dragon_modifier
                            }
                        }
                        NOT = { has_character_modifier = dying_dragonrider_modifier } 
                    }
                }
                effect = {
                    story_owner = { 
                        add_character_modifier = dying_dragonrider_modifier
                        remove_character_modifier = adolescent_dragonrider_modifier
                        remove_character_modifier = young_dragonrider_modifier
                        remove_character_modifier = adult_dragonrider_modifier
                        remove_character_modifier = mature_dragonrider_modifier
                        remove_character_modifier = ancient_dragonrider_modifier
                        remove_character_modifier = hatchling_dragonrider_modifier
                    }
                }
            }
        }
    }

    # Dragon Location Maintenance
    effect_group = {
        days = 30
        chance = 100
        # Check Location
        first_valid = {
            triggered_effect = {
                # If you do not have the dragon with you
                trigger = {
                    NOT = {
                        story_owner = {
                            any_character_artifact = {
                                AND = {
                                    has_variable = dragon_id
                                    var:dragon_id = scope:story.var:story_cycle_dragon_id
                                }
                            }
                        }
                    }
                }
                # Make them come back
                effect = {
                    random_artifact = {
                        limit = { 
                            AND = {
                                has_variable = dragon_id
                                var:dragon_id = scope:story.var:story_cycle_dragon_id 
                            }
                        }
                        set_owner = scope:story.story_owner
                    }
                }
            }
            # Finished The Dance
            triggered_effect = {
                # Check if engaged
                trigger = {
                    story_owner = {
                        OR = {
                            has_variable = a_dance_dancerone
                            has_variable = a_dance_dancertwo
                        }
                        
                    }
                }
                # Engagement ended
                effect = {
                    story_owner = {
                        if = {
                            limit = { has_variable = a_dance_dancerone }
                            remove_variable = a_dance_dancerone
                        }
                        else_if = {
                            limit = { has_variable = a_dance_dancertwo }
                            remove_variable = a_dance_dancertwo
                        }
                    }
                }
            }
        }
    }

    # Dragon Age Maintenance
    effect_group = {
        days = 365
        chance = 100
        first_valid = {
            # If death has not yet come
            triggered_effect = {
                trigger = {
                    story_owner = {
                        any_character_artifact = {
                            AND = {
                                has_variable = dragon_id
                                var:dragon_id = scope:story.var:story_cycle_dragon_id
                                var:dragon_age < var:dragon_life_expectancy
                            }
                        }
                    }
                }
                effect = {
                    story_owner = {
                        random_character_artifact = {
                            limit = { 
                                AND = {
                                    has_variable = dragon_id
                                    var:dragon_id = scope:story.var:story_cycle_dragon_id
                                    var:dragon_age < var:dragon_life_expectancy
                                }
                            }
                            change_variable = {
                                name = dragon_age
                                add = 1
                            }
                            change_variable = {
                                name = dragon_combat_score
                                add = 1
                            }
                        }
                    }
                }
            }
            # Death has arrived
            triggered_effect = {
                trigger = { 
                    story_owner = {
                        any_character_artifact = {
                            AND = {
                                has_variable = dragon_id
                                var:dragon_id = scope:story.var:story_cycle_dragon_id
                                var:dragon_age >= var:dragon_life_expectancy
                            }
                        }
                    }
                }
                effect = {
                    story_owner = {
                        random_character_artifact = {
                            limit = {
                                AND = {
                                    has_variable = dragon_id
                                    var:dragon_id = scope:story.var:story_cycle_dragon_id
                                    var:dragon_age >= var:dragon_life_expectancy
                                }
                            }
                            set_variable = death_age
                        }
                    }
                    end_story = yes
                }
            }
        }
    }

    # Dragon Modifier Maintenance 
    effect_group = {
        days = 365
        chance = 100
        first_valid = {
            # 5+
            triggered_effect = {
                trigger = { 
                    story_owner = {
                        any_character_artifact = {
                            AND = {
                                has_variable = dragon_id
                                var:dragon_id = scope:story.var:story_cycle_dragon_id
                                var:dragon_age >= 5
                                has_artifact_modifier = hatchling_dragon_modifier
                            }
                        }
                    }
                }
                effect = {
                    story_owner = {
                        random_character_artifact = {
                            limit = { 
                                AND = {
                                    has_variable = dragon_id
                                    var:dragon_id = scope:story.var:story_cycle_dragon_id
                                    var:dragon_age >= 5
                                    has_artifact_modifier = hatchling_dragon_modifier
                                }
                            }
                            remove_artifact_modifier = hatchling_dragon_modifier
                            add_artifact_modifier = adolescent_dragon_modifier
                            assign_desc_dragon_effect = {
                                OWNER = prev
                                DRAGON = this
                            }
                        }
                        remove_character_modifier = hatchling_dragonrider_modifier
                        add_character_modifier = adolescent_dragonrider_modifier
                    }
                }
            }
            # 25+
            triggered_effect = {
                trigger = { 
                    story_owner = {
                        any_character_artifact = {
                            AND = {
                                has_variable = dragon_id
                                var:dragon_id = scope:story.var:story_cycle_dragon_id
                                var:dragon_age >= 25
                                has_artifact_modifier = adolescent_dragon_modifier
                            }
                        }
                    }
                }
                effect = {
                    story_owner = {
                        random_character_artifact = {
                            limit = { 
                                AND = {
                                    has_variable = dragon_id
                                    var:dragon_id = scope:story.var:story_cycle_dragon_id
                                    var:dragon_age >= 25
                                    has_artifact_modifier = adolescent_dragon_modifier
                                }
                            }
                            remove_artifact_modifier = adolescent_dragon_modifier
                            add_artifact_modifier = young_dragon_modifier
                            assign_desc_dragon_effect = {
                                OWNER = prev
                                DRAGON = this
                            }
                        }
                        remove_character_modifier = adolescent_dragonrider_modifier
                        add_character_modifier = young_dragonrider_modifier
                    }
                }
            }
            # 50+
            triggered_effect = {
                trigger = { 
                    story_owner = {
                        any_character_artifact = {
                            AND = {
                                has_variable = dragon_id
                                var:dragon_id = scope:story.var:story_cycle_dragon_id
                                var:dragon_age >= 50
                                has_artifact_modifier = young_dragon_modifier
                            }
                        }
                    }
                }
                effect = {
                    story_owner = {
                        random_character_artifact = {
                            limit = { 
                                AND = {
                                    has_variable = dragon_id
                                    var:dragon_id = scope:story.var:story_cycle_dragon_id
                                    var:dragon_age >= 50
                                    has_artifact_modifier = young_dragon_modifier
                                }
                            }
                            remove_artifact_modifier = young_dragon_modifier
                            add_artifact_modifier = adult_dragon_modifier
                            assign_desc_dragon_effect = {
                                OWNER = prev
                                DRAGON = this
                            }
                        }
                        remove_character_modifier = young_dragonrider_modifier
                        add_character_modifier = adult_dragonrider_modifier
                    }
                }
            }
            # 100+
            triggered_effect = {
                trigger = { 
                    story_owner = {
                        any_character_artifact = {
                            AND = {
                                has_variable = dragon_id
                                var:dragon_id = scope:story.var:story_cycle_dragon_id
                                var:dragon_age >= 100
                                has_artifact_modifier = adult_dragon_modifier
                            }
                        }
                    }
                }
                effect = {
                    story_owner = {
                        random_character_artifact = {
                            limit = { 
                                AND = {
                                    has_variable = dragon_id
                                    var:dragon_id = scope:story.var:story_cycle_dragon_id
                                    var:dragon_age >= 100
                                    has_artifact_modifier = adult_dragon_modifier
                                }
                            }
                            remove_artifact_modifier = adult_dragon_modifier
                            add_artifact_modifier = mature_dragon_modifier
                            assign_desc_dragon_effect = {
                                OWNER = prev
                                DRAGON = this
                            }
                        }
                        remove_character_modifier = adult_dragonrider_modifier
                        add_character_modifier = mature_dragonrider_modifier
                    }
                }
            }
            # 150+
            triggered_effect = {
                trigger = {
                    story_owner = {
                        any_character_artifact = {
                            AND = {
                                has_variable = dragon_id
                                var:dragon_id = scope:story.var:story_cycle_dragon_id
                                var:dragon_age >= 150
                                has_artifact_modifier = mature_dragon_modifier
                            }
                        }
                    }
                }
                effect = {
                    story_owner = {
                        random_character_artifact = {
                            limit = { 
                                AND = {
                                    has_variable = dragon_id
                                    var:dragon_id = scope:story.var:story_cycle_dragon_id
                                    var:dragon_age >= 150
                                    has_artifact_modifier = mature_dragon_modifier
                                }
                            }
                            remove_artifact_modifier = mature_dragon_modifier
                            add_artifact_modifier = ancient_dragon_modifier
                        }
                        remove_character_modifier = mature_dragonrider_modifier
                        add_character_modifier = ancient_dragonrider_modifier
                    }
                }
            }
            # 200+
            triggered_effect = {
                trigger = {
                    story_owner = {
                        any_character_artifact = {
                            AND = {
                                has_variable = dragon_id
                                var:dragon_id = scope:story.var:story_cycle_dragon_id
                                var:dragon_age >= 200
                                has_artifact_modifier = ancient_dragon_modifier
                            }
                        }
                    }
                }
                effect = {
                    story_owner = {
                        random_character_artifact = {
                            limit = { 
                                AND = {
                                    has_variable = dragon_id
                                    var:dragon_id = scope:story.var:story_cycle_dragon_id
                                    var:dragon_age >= 200
                                    has_artifact_modifier = ancient_dragon_modifier
                                }
                            }
                            remove_artifact_modifier = ancient_dragon_modifier
                            add_artifact_modifier = dying_dragon_modifier
                        }
                        remove_character_modifier = ancient_dragonrider_modifier
                        add_character_modifier = dying_dragonrider_modifier
                    }
                }
            }
        }
    }

    # Dragon Ally Support Mechanics
    effect_group = {
        # Regularly Check
        days = 10
        chance = 100
        # Effects
        first_valid = {
            # In Army As Knight
            triggered_effect = {
                trigger = {
                    story_owner = {
                        exists = knight_army
                        NOT = { exists = commanding_army }
                    }
                }
                # Add Modifier
                effect = {
                    story_owner = {
                        # Hatchling Ally
                        if = {
                            limit = { has_character_modifier = hatchling_dragonrider_modifier }
                            knight_army = {
                                army_commander = {
                                    add_character_modifier = { 
                                        modifier = hatchling_dragonally_modifier
                                        days = 20
                                    } 
                                }
                            }
                        }
                        # Adolescent Ally
                        else_if = {
                            limit = { has_character_modifier = adolescent_dragonrider_modifier }
                            knight_army = {
                                army_commander = {
                                    add_character_modifier = { 
                                        modifier = adolescent_dragonally_modifier
                                        days = 20
                                    } 
                                }
                            }
                        }
                        # Young Ally
                        else_if = {
                            limit = { has_character_modifier = young_dragonrider_modifier }
                            knight_army = {
                                army_commander = {
                                    add_character_modifier = { 
                                        modifier = young_dragonally_modifier
                                        days = 20
                                    } 
                                }
                            }
                        }
                        # Adult Ally
                        else_if = {
                            limit = { has_character_modifier = adult_dragonrider_modifier }
                            knight_army = {
                                army_commander = {
                                    add_character_modifier = { 
                                        modifier = adult_dragonally_modifier
                                        days = 20
                                    } 
                                }
                            }
                        }
                        # Mature Ally
                        else_if = {
                            limit = { has_character_modifier = mature_dragonrider_modifier }
                            knight_army = {
                                army_commander = {
                                    add_character_modifier = { 
                                        modifier = mature_dragonally_modifier
                                        days = 20
                                    } 
                                }
                            }
                        }
                        # Ancient Ally
                        else_if = {
                            limit = { has_character_modifier = ancient_dragonrider_modifier }
                            knight_army = {
                                army_commander = {
                                    add_character_modifier = { 
                                        modifier = ancient_dragonally_modifier
                                        days = 20
                                    } 
                                }
                            }
                        }
                        # Dying Ally
                        else_if = {
                            limit = { has_character_modifier = dying_dragonrider_modifier }
                            knight_army = {
                                army_commander = {
                                    add_character_modifier = { 
                                        modifier = dying_dragonally_modifier
                                        days = 20
                                    } 
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    # Dragon Battle Mechanics
    effect_group = {
        # Regularly Check
        days = 3
        chance = 100
        # Effects
        first_valid = {
            # In Army As Knight
            triggered_effect = {
                trigger = {
                    story_owner = {
                        any_character_artifact = {
                            has_variable = has_dragon_rider
                            has_variable = dragon_id
                            var:dragon_id = scope:story.var:story_cycle_dragon_id 
                        }
                        # Not In Dance
                        NOT = {
                            OR = {
                                has_variable = a_dance_one
                                has_variable = a_dance_two
                            }
                        }
                        # Is either a knight or commander
                        OR = {
                            # Knight In Combat
                            AND = {
                                exists = knight_army
                                knight_army = {
                                    is_army_in_combat = yes
                                }
                            }
                            # Commander In Combat
                            AND = {
                                exists = commanding_army
                                commanding_army = {
                                    is_army_in_combat = yes
                                }
                            }
                        }
                    }
                }
                effect = {
                    story_owner = {
                        # Save location
                        location = {
                            save_scope_as = dance_location
                        }
                        # War Enemy
                        random_war_enemy = {
                            # Check if any enemy knight at our location is a dragon rider
                            random_knight = {
                                if = {
                                    limit = {
                                        AND = {
                                            NOT = {
                                                OR = {
                                                    has_variable = a_dance_one
                                                    has_variable = a_dance_two
                                                }
                                            }
                                            location = scope:dance_location
                                            OR = {
                                                has_character_modifier = hatchling_dragonrider_modifier
                                                has_character_modifier = adolescent_dragonrider_modifier
                                                has_character_modifier = young_dragonrider_modifier
                                                has_character_modifier = adult_dragonrider_modifier
                                                has_character_modifier = mature_dragonrider_modifier
                                                has_character_modifier = ancient_dragonrider_modifier
                                                has_character_modifier = dying_dragonrider_modifier
                                            }
                                        }
                                    }
                                    save_scope_as = a_dance_dancertwo
                                    set_variable = a_dance_two
                                }
                            }
                            # Check if any enemy at our location is a dragon rider
                            if = {
                                limit = {
                                    NOT = { exists = scope:a_dance_two }
                                    AND = {
                                        NOT = {
                                            OR = {
                                                has_variable = a_dance_one
                                                has_variable = a_dance_two
                                            }
                                        }
                                        location = scope:dance_location
                                        OR = {
                                            has_character_modifier = hatchling_dragonrider_modifier
                                            has_character_modifier = adolescent_dragonrider_modifier
                                            has_character_modifier = young_dragonrider_modifier
                                            has_character_modifier = adult_dragonrider_modifier
                                            has_character_modifier = mature_dragonrider_modifier
                                            has_character_modifier = ancient_dragonrider_modifier
                                            has_character_modifier = dying_dragonrider_modifier
                                        }
                                    }
                                }
                                save_scope_as = a_dance_dancertwo
                                set_variable = a_dance_two
                            }
                        }
                        # Start If
                        if = {
                            # If an enemy dragon rider has been found
                            limit = { exists = scope:a_dance_dancertwo }
                            # Set this rider as first participant
                            set_variable = a_dance_one
                            save_scope_as = a_dance_dancerone
                        }
                    }
                    if = {
                        limit = {
                            AND = {
                                exists = scope:a_dance_dancertwo
                                exists = scope:a_dance_dancerone
                            }
                        }
                        # Start Dance
                        dragon_dance_effect = {
                            RECIPIENT = scope:a_dance_dancertwo
                            ACTOR = scope:a_dance_dancerone
                        }
                    }
                }
            }
        }
    }

    # Random Death Chance While Riding In Battle
    effect_group = {
        # Timer
        years = 2
        # 5% Chance
        chance = 5
        # Effects
        first_valid = {
            # In Army As Knight
            triggered_effect = {
                trigger = {
                    story_owner = {
                        # Is either a knight or commander
                        OR = {
                            # Knight In Combat
                            AND = {
                                exists = knight_army
                                knight_army = {
                                    is_army_in_combat = yes
                                }
                            }
                            # Commander In Combat
                            AND = {
                                exists = commanding_army
                                commanding_army = {
                                    is_army_in_combat = yes
                                }
                            }
                        }
                    }
                }
                effect = {
                    story_owner = {
                        death = {
                            death_reason = death_battle
                        }
                    }
                    random_artifact = {
                        limit = { 
                            AND = {
                                has_variable = dragon_id
                                var:dragon_id = scope:story.var:story_cycle_dragon_id 
                            }
                        }
                        set_variable = death_battle
                    }
                    end_story = yes
                }
            }
        }
    }

}

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
#    IMPORTANT CODE
#
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
#    BASE EFFECT
#
#    effect_group = {
#        days = 90
#        chance = 100
#        first_valid = {
#            triggered_effect = {
#                trigger = { 
#                    story_owner = {
#                        any_character_artifact = {
#                            AND = {
#                                var:dragon_id = scope:story.var:story_cycle_dragon_id
#                            }
#                        }
#                    }
#                }
#                effect = {
#                    story_owner = {
#                        random_character_artifact = {
#                            limit = { 
#                                AND = {
#                                    var:dragon_id = scope:story.var:story_cycle_dragon_id
#                                }
#                            }
#                        }
#                    }
#                }
#            }
#        }
#    }
#
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #